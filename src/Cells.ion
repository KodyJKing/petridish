const
    {Matter, Common} = import './'
    {World, Body, Bodies, Events, Composite, Vector} = Matter
    {createSampler} = Common

export const
    class Cell
        constructor: (creature, x, y) ->
            @creature = creature
            @body = Bodies.rectangle(..)
                x * game.cellSize, y * game.cellSize
                game.cellSize, game.cellSize, {}
                    render: { fillStyle: @@color }
            @body.cell = @
            Body.setDensity(@body, @@density * 0.001)
            @constraints = []
        weight: 5
        color: '#F8F8F2'
        density: 1
        # strength: 1.2
        strength: 1.1
        properties:
            edible: true
            remove: ->
                World.remove(game.world, @body, true)
                for constraint in @constraints
                    World.remove(game.world, constraint, true)
                @onRemove?()

    class CellRoot extends Cell
        weight: 0
        color: '#FFE792'
        properties:
            onRemove: ->
                console.log('ROOT CELL LOSS')
                @creature.die()

    class CellMouth extends Cell
        weight: 2
        color: '#F92672'
        density: 2
        properties:
            edible: false
            update: (dt) ->
                @cooldown = 0
                @cooldown -= dt
            collide: (other) ->
                @cooldown ?= 0
                let otherCell = other.cell
                if otherCell? and otherCell.creature isnt @creature and otherCell.edible and @cooldown <= 0
                    otherCell.remove()
                    @creature.energy += 1
                    @cooldown += 200

    class CellPhotosynthesis extends Cell
        weight: 1
        color: '#A6E22E'
        density: 5
        energyGainRate: 0.00012
        properties:
            update: (dt) ->
                @creature.energy += @@energyGainRate * dt

    class CellArmor extends Cell
        weight: 1
        color: '#AE81FF'
        density: 5
        strength: 5
        properties:
            edible: false

    class CellThruster extends Cell
        weight: 1
        color: '#FD971F'
        # thrust: 0.0000001
        thrust: 0.0000002
        # thrust: 0.000000075
        properties:
            update: (dt) ->
                let force = dt * @@thrust * game.cellSizeSquared
                Matter.Body.applyForce(..)
                    @body, @body.position, {}
                        x: Math.cos(@body.angle) * force
                        y: Math.sin(@body.angle) * force
