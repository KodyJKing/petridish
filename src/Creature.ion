const
    ion = import 'ion'
    {Matter, Common, Genome, Cells} = import './'
    {Engine, World, Body, Bodies, Constraint, Events, Composite, Vector} = Matter
    {createSampler, random, randInt, clamp, Grid} = Common

export class Creature
    constructor: (genome = null) ->
        @body = Composite.create()
        if genome?
            @genome = genome
        else
            @genome = new Genome()
            @genome.setCell(0, 0, Cells.CellRoot)
            for let i = 0; i < game.startingMutations; i++
                @genome.mutate()
        @genome.build(@)
        @dead = false
        @energy = 10
        @age = 0
    # energyLossRate: 0.0006
    properties:
        add: (position) ->
            let padding = 100
            let x, y
            if position?
                x = clamp(..)
                    position.x + random(-200, 200)
                    padding, game.WIDTH - padding
                y = clamp(..)
                    position.y + random(-200, 200)
                    padding, game.HEIGHT - padding
            else
                x = random(padding, game.WIDTH - padding)
                y = random(padding, game.HEIGHT - padding)
            Composite.rotate(@body, random(0, Math.PI * 2), {x: 0, y:0})
            Composite.translate(@body, {x,y})
            World.add(game.world, @body)

        remove: -> World.remove(game.world, @body)

        breakStretchedConstraints: ->
            for constraint in Composite.allConstraints(@body)
                let diff = Vector.sub(constraint.bodyA.position, constraint.bodyB.position)
                let distSq = Vector.magnitudeSquared(diff)
                if distSq > game.cellSizeSquared * constraint.lengthFactorSquared * constraint.strength
                    Composite.remove(@body, constraint)

        update: (dt) ->
            for body in Composite.allBodies(@body)
                body.cell.update?(dt)

            @breakStretchedConstraints()

            @energy -= dt * game.energyLossRate
            if @energy <= 0
                console.log('STARVATION')
                @die()
            else if @energy >= 20 and game.creatures.length < game.maxCreatures
                @reproduce()

            @age += dt
            if @age > game.maxAge
                console.log('OLD AGE')
                @die()

        die: ->
            @dead = true
            for constraint in Composite.allConstraints(@body)
                Composite.remove(@body, constraint)
            for body in Composite.allBodies(@body)
                if body.cell.constructor isnt Cells.Cell
                    Composite.remove(@body, body)

        reproduce: ->
            @energy -= 10
            let childGenome = ion.deserialize(ion.serialize(@genome), {Genome, Grid})
            childGenome.mutate()
            let child = new Creature(childGenome)
            game.creatures.push(child)
            child.add(Composite.allBodies(@body)[0].position)

        constrain: (cellA, cellB, options) ->
            let constraint = Constraint.create(..)
                Object.assign(..)
                    { bodyA: cellA.body, bodyB: cellB.body }
                    options
            cellA.constraints.push(constraint)
            cellB.constraints.push(constraint)
            Composite.add(@body, constraint)
            return constraint