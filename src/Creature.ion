const
    {Matter, Common} = import './'

    {Engine, World, Body, Bodies, Constraint, Events, Composite} = Matter

    {createSampler} = Common

const
    cellSize = 32
    frictionAir = 0.05

class Cell
    weight: 2
    constructor: (x, y) ->
        @body = Bodies.rectangle(..)
            x * cellSize, y * cellSize
            cellSize, cellSize, {}
                frictionAir: frictionAir
                render: { fillStyle: @@color }
        @body.cell = @
    color: '#E6E6E6'
    properties:
        update: (dt) ->

class CellThruster extends Cell
    weight: 1
    color: '#F92672'
    thrust: 0.0001
    properties:
        update: (dt) ->
            Matter.Body.applyForce(..)
                @body, @body.position, {}
                    x: Math.cos(@body.angle) * @@thrust * dt
                    y: Math.sin(@body.angle) * @@thrust * dt

class Genotype
    constructor: ->
        @cells = {}
    posString: (pos) -> pos.x + ',' + pos.y
    properties:
        set: (pos, type) -> @cells[@@posString(pos)] = type
        get: (pos) -> @cells[@@posString(pos)]

const
    cellTypes = [Cell, CellThruster]
    randomCellType = do ->
        let weights = cellTypes.map((x) -> x.weight)
        let sampler = createSampler(weights)
        return -> cellTypes[sampler()]

export class Creature
    constructor: (world) ->
        @world = world
        @body = Composite.create()
        for let i = 0; i < 20; i++
            let cellType = randomCellType()
            let cell = new cellType(0, 0)
            Composite.add(@body, cell.body)

    properties:
        add: ->
            World.add(@world, @body)
        remove: ->
            World.remove(@world, @body)
        update: (dt) ->
            for body in Matter.Composite.allBodies(@body)
                body.cell.update(dt)